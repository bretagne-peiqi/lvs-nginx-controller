// +build linux

package nlgo

// v4.2.3

const NL80211_GENL_NAME = "nl80211"

const (
	NL80211_CMD_UNSPEC = iota
	NL80211_CMD_GET_WIPHY
	NL80211_CMD_SET_WIPHY
	NL80211_CMD_NEW_WIPHY
	NL80211_CMD_DEL_WIPHY
	NL80211_CMD_GET_INTERFACE
	NL80211_CMD_SET_INTERFACE
	NL80211_CMD_NEW_INTERFACE
	NL80211_CMD_DEL_INTERFACE
	NL80211_CMD_GET_KEY
	NL80211_CMD_SET_KEY
	NL80211_CMD_NEW_KEY
	NL80211_CMD_DEL_KEY
	NL80211_CMD_GET_BEACON
	NL80211_CMD_SET_BEACON
	NL80211_CMD_START_AP
	NL80211_CMD_STOP_AP
	NL80211_CMD_GET_STATION
	NL80211_CMD_SET_STATION
	NL80211_CMD_NEW_STATION
	NL80211_CMD_DEL_STATION
	NL80211_CMD_GET_MPATH
	NL80211_CMD_SET_MPATH
	NL80211_CMD_NEW_MPATH
	NL80211_CMD_DEL_MPATH
	NL80211_CMD_SET_BSS
	NL80211_CMD_SET_REG
	NL80211_CMD_REQ_SET_REG
	NL80211_CMD_GET_MESH_CONFIG
	NL80211_CMD_SET_MESH_CONFIG
	NL80211_CMD_SET_MGMT_EXTRA_IE
	NL80211_CMD_GET_REG
	NL80211_CMD_GET_SCAN
	NL80211_CMD_TRIGGER_SCAN
	NL80211_CMD_NEW_SCAN_RESULTS
	NL80211_CMD_SCAN_ABORTED
	NL80211_CMD_REG_CHANGE
	NL80211_CMD_AUTHENTICATE
	NL80211_CMD_ASSOCIATE
	NL80211_CMD_DEAUTHENTICATE
	NL80211_CMD_DISASSOCIATE
	NL80211_CMD_MICHAEL_MIC_FAILURE
	NL80211_CMD_REG_BEACON_HINT
	NL80211_CMD_JOIN_IBSS
	NL80211_CMD_LEAVE_IBSS
	NL80211_CMD_TESTMODE
	NL80211_CMD_CONNECT
	NL80211_CMD_ROAM
	NL80211_CMD_DISCONNECT
	NL80211_CMD_SET_WIPHY_NETNS
	NL80211_CMD_GET_SURVEY
	NL80211_CMD_NEW_SURVEY_RESULTS
	NL80211_CMD_SET_PMKSA
	NL80211_CMD_DEL_PMKSA
	NL80211_CMD_FLUSH_PMKSA
	NL80211_CMD_REMAIN_ON_CHANNEL
	NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL
	NL80211_CMD_SET_TX_BITRATE_MASK
	NL80211_CMD_REGISTER_FRAME
	NL80211_CMD_FRAME
	NL80211_CMD_FRAME_TX_STATUS
	NL80211_CMD_SET_POWER_SAVE
	NL80211_CMD_GET_POWER_SAVE
	NL80211_CMD_SET_CQM
	NL80211_CMD_NOTIFY_CQM
	NL80211_CMD_SET_CHANNEL
	NL80211_CMD_SET_WDS_PEER
	NL80211_CMD_FRAME_WAIT_CANCEL
	NL80211_CMD_JOIN_MESH
	NL80211_CMD_LEAVE_MESH
	NL80211_CMD_UNPROT_DEAUTHENTICATE
	NL80211_CMD_UNPROT_DISASSOCIATE
	NL80211_CMD_NEW_PEER_CANDIDATE
	NL80211_CMD_GET_WOWLAN
	NL80211_CMD_SET_WOWLAN
	NL80211_CMD_START_SCHED_SCAN
	NL80211_CMD_STOP_SCHED_SCAN
	NL80211_CMD_SCHED_SCAN_RESULTS
	NL80211_CMD_SCHED_SCAN_STOPPED
	NL80211_CMD_SET_REKEY_OFFLOAD
	NL80211_CMD_PMKSA_CANDIDATE
	NL80211_CMD_TDLS_OPER
	NL80211_CMD_TDLS_MGMT
	NL80211_CMD_UNEXPECTED_FRAME
	NL80211_CMD_PROBE_CLIENT
	NL80211_CMD_REGISTER_BEACONS
	NL80211_CMD_UNEXPECTED_4ADDR_FRAME
	NL80211_CMD_SET_NOACK_MAP
	NL80211_CMD_CH_SWITCH_NOTIFY
	NL80211_CMD_START_P2P_DEVICE
	NL80211_CMD_STOP_P2P_DEVICE
	NL80211_CMD_CONN_FAILED
	NL80211_CMD_SET_MCAST_RATE
	NL80211_CMD_SET_MAC_ACL
	NL80211_CMD_RADAR_DETECT
	NL80211_CMD_GET_PROTOCOL_FEATURES
	NL80211_CMD_UPDATE_FT_IES
	NL80211_CMD_FT_EVENT
	NL80211_CMD_CRIT_PROTOCOL_START
	NL80211_CMD_CRIT_PROTOCOL_STOP
	NL80211_CMD_GET_COALESCE
	NL80211_CMD_SET_COALESCE
	NL80211_CMD_CHANNEL_SWITCH
	NL80211_CMD_VENDOR
	NL80211_CMD_SET_QOS_MAP
	NL80211_CMD_ADD_TX_TS
	NL80211_CMD_DEL_TX_TS
	NL80211_CMD_GET_MPP
	NL80211_CMD_JOIN_OCB
	NL80211_CMD_LEAVE_OCB
	NL80211_CMD_CH_SWITCH_STARTED_NOTIFY
	NL80211_CMD_TDLS_CHANNEL_SWITCH
	NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH
	NL80211_CMD_WIPHY_REG_CHANGE
)
const (
	NL80211_ATTR_UNSPEC = iota
	NL80211_ATTR_WIPHY
	NL80211_ATTR_WIPHY_NAME
	NL80211_ATTR_IFINDEX
	NL80211_ATTR_IFNAME
	NL80211_ATTR_IFTYPE
	NL80211_ATTR_MAC
	NL80211_ATTR_KEY_DATA
	NL80211_ATTR_KEY_IDX
	NL80211_ATTR_KEY_CIPHER
	NL80211_ATTR_KEY_SEQ
	NL80211_ATTR_KEY_DEFAULT
	NL80211_ATTR_BEACON_INTERVAL
	NL80211_ATTR_DTIM_PERIOD
	NL80211_ATTR_BEACON_HEAD
	NL80211_ATTR_BEACON_TAIL
	NL80211_ATTR_STA_AID
	NL80211_ATTR_STA_FLAGS
	NL80211_ATTR_STA_LISTEN_INTERVAL
	NL80211_ATTR_STA_SUPPORTED_RATES
	NL80211_ATTR_STA_VLAN
	NL80211_ATTR_STA_INFO
	NL80211_ATTR_WIPHY_BANDS
	NL80211_ATTR_MNTR_FLAGS
	NL80211_ATTR_MESH_ID
	NL80211_ATTR_STA_PLINK_ACTION
	NL80211_ATTR_MPATH_NEXT_HOP
	NL80211_ATTR_MPATH_INFO
	NL80211_ATTR_BSS_CTS_PROT
	NL80211_ATTR_BSS_SHORT_PREAMBLE
	NL80211_ATTR_BSS_SHORT_SLOT_TIME
	NL80211_ATTR_HT_CAPABILITY
	NL80211_ATTR_SUPPORTED_IFTYPES
	NL80211_ATTR_REG_ALPHA2
	NL80211_ATTR_REG_RULES
	NL80211_ATTR_MESH_CONFIG
	NL80211_ATTR_BSS_BASIC_RATES
	NL80211_ATTR_WIPHY_TXQ_PARAMS
	NL80211_ATTR_WIPHY_FREQ
	NL80211_ATTR_WIPHY_CHANNEL_TYPE
	NL80211_ATTR_KEY_DEFAULT_MGMT
	NL80211_ATTR_MGMT_SUBTYPE
	NL80211_ATTR_IE
	NL80211_ATTR_MAX_NUM_SCAN_SSIDS
	NL80211_ATTR_SCAN_FREQUENCIES
	NL80211_ATTR_SCAN_SSIDS
	NL80211_ATTR_GENERATION
	NL80211_ATTR_BSS
	NL80211_ATTR_REG_INITIATOR
	NL80211_ATTR_REG_TYPE
	NL80211_ATTR_SUPPORTED_COMMANDS
	NL80211_ATTR_FRAME
	NL80211_ATTR_SSID
	NL80211_ATTR_AUTH_TYPE
	NL80211_ATTR_REASON_CODE
	NL80211_ATTR_KEY_TYPE
	NL80211_ATTR_MAX_SCAN_IE_LEN
	NL80211_ATTR_CIPHER_SUITES
	NL80211_ATTR_FREQ_BEFORE
	NL80211_ATTR_FREQ_AFTER
	NL80211_ATTR_FREQ_FIXED
	NL80211_ATTR_WIPHY_RETRY_SHORT
	NL80211_ATTR_WIPHY_RETRY_LONG
	NL80211_ATTR_WIPHY_FRAG_THRESHOLD
	NL80211_ATTR_WIPHY_RTS_THRESHOLD
	NL80211_ATTR_TIMED_OUT
	NL80211_ATTR_USE_MFP
	NL80211_ATTR_STA_FLAGS2
	NL80211_ATTR_CONTROL_PORT
	NL80211_ATTR_TESTDATA
	NL80211_ATTR_PRIVACY
	NL80211_ATTR_DISCONNECTED_BY_AP
	NL80211_ATTR_STATUS_CODE
	NL80211_ATTR_CIPHER_SUITES_PAIRWISE
	NL80211_ATTR_CIPHER_SUITE_GROUP
	NL80211_ATTR_WPA_VERSIONS
	NL80211_ATTR_AKM_SUITES
	NL80211_ATTR_REQ_IE
	NL80211_ATTR_RESP_IE
	NL80211_ATTR_PREV_BSSID
	NL80211_ATTR_KEY
	NL80211_ATTR_KEYS
	NL80211_ATTR_PID
	NL80211_ATTR_4ADDR
	NL80211_ATTR_SURVEY_INFO
	NL80211_ATTR_PMKID
	NL80211_ATTR_MAX_NUM_PMKIDS
	NL80211_ATTR_DURATION
	NL80211_ATTR_COOKIE
	NL80211_ATTR_WIPHY_COVERAGE_CLASS
	NL80211_ATTR_TX_RATES
	NL80211_ATTR_FRAME_MATCH
	NL80211_ATTR_ACK
	NL80211_ATTR_PS_STATE
	NL80211_ATTR_CQM
	NL80211_ATTR_LOCAL_STATE_CHANGE
	NL80211_ATTR_AP_ISOLATE
	NL80211_ATTR_WIPHY_TX_POWER_SETTING
	NL80211_ATTR_WIPHY_TX_POWER_LEVEL
	NL80211_ATTR_TX_FRAME_TYPES
	NL80211_ATTR_RX_FRAME_TYPES
	NL80211_ATTR_FRAME_TYPE
	NL80211_ATTR_CONTROL_PORT_ETHERTYPE
	NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT
	NL80211_ATTR_SUPPORT_IBSS_RSN
	NL80211_ATTR_WIPHY_ANTENNA_TX
	NL80211_ATTR_WIPHY_ANTENNA_RX
	NL80211_ATTR_MCAST_RATE
	NL80211_ATTR_OFFCHANNEL_TX_OK
	NL80211_ATTR_BSS_HT_OPMODE
	NL80211_ATTR_KEY_DEFAULT_TYPES
	NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION
	NL80211_ATTR_MESH_SETUP
	NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX
	NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX
	NL80211_ATTR_SUPPORT_MESH_AUTH
	NL80211_ATTR_STA_PLINK_STATE
	NL80211_ATTR_WOWLAN_TRIGGERS
	NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED
	NL80211_ATTR_SCHED_SCAN_INTERVAL
	NL80211_ATTR_INTERFACE_COMBINATIONS
	NL80211_ATTR_SOFTWARE_IFTYPES
	NL80211_ATTR_REKEY_DATA
	NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS
	NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN
	NL80211_ATTR_SCAN_SUPP_RATES
	NL80211_ATTR_HIDDEN_SSID
	NL80211_ATTR_IE_PROBE_RESP
	NL80211_ATTR_IE_ASSOC_RESP
	NL80211_ATTR_STA_WME
	NL80211_ATTR_SUPPORT_AP_UAPSD
	NL80211_ATTR_ROAM_SUPPORT
	NL80211_ATTR_SCHED_SCAN_MATCH
	NL80211_ATTR_MAX_MATCH_SETS
	NL80211_ATTR_PMKSA_CANDIDATE
	NL80211_ATTR_TX_NO_CCK_RATE
	NL80211_ATTR_TDLS_ACTION
	NL80211_ATTR_TDLS_DIALOG_TOKEN
	NL80211_ATTR_TDLS_OPERATION
	NL80211_ATTR_TDLS_SUPPORT
	NL80211_ATTR_TDLS_EXTERNAL_SETUP
	NL80211_ATTR_DEVICE_AP_SME
	NL80211_ATTR_DONT_WAIT_FOR_ACK
	NL80211_ATTR_FEATURE_FLAGS
	NL80211_ATTR_PROBE_RESP_OFFLOAD
	NL80211_ATTR_PROBE_RESP
	NL80211_ATTR_DFS_REGION
	NL80211_ATTR_DISABLE_HT
	NL80211_ATTR_HT_CAPABILITY_MASK
	NL80211_ATTR_NOACK_MAP
	NL80211_ATTR_INACTIVITY_TIMEOUT
	NL80211_ATTR_RX_SIGNAL_DBM
	NL80211_ATTR_BG_SCAN_PERIOD
	NL80211_ATTR_WDEV
	NL80211_ATTR_USER_REG_HINT_TYPE
	NL80211_ATTR_CONN_FAILED_REASON
	NL80211_ATTR_SAE_DATA
	NL80211_ATTR_VHT_CAPABILITY
	NL80211_ATTR_SCAN_FLAGS
	NL80211_ATTR_CHANNEL_WIDTH
	NL80211_ATTR_CENTER_FREQ1
	NL80211_ATTR_CENTER_FREQ2
	NL80211_ATTR_P2P_CTWINDOW
	NL80211_ATTR_P2P_OPPPS
	NL80211_ATTR_LOCAL_MESH_POWER_MODE
	NL80211_ATTR_ACL_POLICY
	NL80211_ATTR_MAC_ADDRS
	NL80211_ATTR_MAC_ACL_MAX
	NL80211_ATTR_RADAR_EVENT
	NL80211_ATTR_EXT_CAPA
	NL80211_ATTR_EXT_CAPA_MASK
	NL80211_ATTR_STA_CAPABILITY
	NL80211_ATTR_STA_EXT_CAPABILITY
	NL80211_ATTR_PROTOCOL_FEATURES
	NL80211_ATTR_SPLIT_WIPHY_DUMP
	NL80211_ATTR_DISABLE_VHT
	NL80211_ATTR_VHT_CAPABILITY_MASK
	NL80211_ATTR_MDID
	NL80211_ATTR_IE_RIC
	NL80211_ATTR_CRIT_PROT_ID
	NL80211_ATTR_MAX_CRIT_PROT_DURATION
	NL80211_ATTR_PEER_AID
	NL80211_ATTR_COALESCE_RULE
	NL80211_ATTR_CH_SWITCH_COUNT
	NL80211_ATTR_CH_SWITCH_BLOCK_TX
	NL80211_ATTR_CSA_IES
	NL80211_ATTR_CSA_C_OFF_BEACON
	NL80211_ATTR_CSA_C_OFF_PRESP
	NL80211_ATTR_RXMGMT_FLAGS
	NL80211_ATTR_STA_SUPPORTED_CHANNELS
	NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES
	NL80211_ATTR_HANDLE_DFS
	NL80211_ATTR_SUPPORT_5_MHZ
	NL80211_ATTR_SUPPORT_10_MHZ
	NL80211_ATTR_OPMODE_NOTIF
	NL80211_ATTR_VENDOR_ID
	NL80211_ATTR_VENDOR_SUBCMD
	NL80211_ATTR_VENDOR_DATA
	NL80211_ATTR_VENDOR_EVENTS
	NL80211_ATTR_QOS_MAP
	NL80211_ATTR_MAC_HINT
	NL80211_ATTR_WIPHY_FREQ_HINT
	NL80211_ATTR_MAX_AP_ASSOC_STA
	NL80211_ATTR_TDLS_PEER_CAPABILITY
	NL80211_ATTR_IFACE_SOCKET_OWNER
	NL80211_ATTR_CSA_C_OFFSETS_TX
	NL80211_ATTR_MAX_CSA_COUNTERS
	NL80211_ATTR_TDLS_INITIATOR
	NL80211_ATTR_USE_RRM
	NL80211_ATTR_WIPHY_DYN_ACK
	NL80211_ATTR_TSID
	NL80211_ATTR_USER_PRIO
	NL80211_ATTR_ADMITTED_TIME
	NL80211_ATTR_SMPS_MODE
	NL80211_ATTR_OPER_CLASS
	NL80211_ATTR_MAC_MASK
	NL80211_ATTR_WIPHY_SELF_MANAGED_REG
	NL80211_ATTR_EXT_FEATURES
	NL80211_ATTR_SURVEY_RADIO_STATS
	NL80211_ATTR_NETNS_FD
	NL80211_ATTR_SCHED_SCAN_DELAY
	NL80211_ATTR_REG_INDOOR
)
const (
	NL80211_IFTYPE_UNSPECIFIED = iota
	NL80211_IFTYPE_ADHOC
	NL80211_IFTYPE_STATION
	NL80211_IFTYPE_AP
	NL80211_IFTYPE_AP_VLAN
	NL80211_IFTYPE_WDS
	NL80211_IFTYPE_MONITOR
	NL80211_IFTYPE_MESH_POINT
	NL80211_IFTYPE_P2P_CLIENT
	NL80211_IFTYPE_P2P_GO
	NL80211_IFTYPE_P2P_DEVICE
	NL80211_IFTYPE_OCB
	NUM_NL80211_IFTYPES
)
const (
	_ = iota
	NL80211_STA_FLAG_AUTHORIZED
	NL80211_STA_FLAG_SHORT_PREAMBLE
	NL80211_STA_FLAG_WME
	NL80211_STA_FLAG_MFP
	NL80211_STA_FLAG_AUTHENTICATED
	NL80211_STA_FLAG_TDLS_PEER
	NL80211_STA_FLAG_ASSOCIATED
	__NL80211_STA_FLAG_AFTER_LAST
)
const (
	_ = iota
	NL80211_RATE_INFO_BITRATE
	NL80211_RATE_INFO_MCS
	NL80211_RATE_INFO_40_MHZ_WIDTH
	NL80211_RATE_INFO_SHORT_GI
	NL80211_RATE_INFO_BITRATE32
	NL80211_RATE_INFO_VHT_MCS
	NL80211_RATE_INFO_VHT_NSS
	NL80211_RATE_INFO_80_MHZ_WIDTH
	NL80211_RATE_INFO_80P80_MHZ_WIDTH
	NL80211_RATE_INFO_160_MHZ_WIDTH
	NL80211_RATE_INFO_10_MHZ_WIDTH
	NL80211_RATE_INFO_5_MHZ_WIDTH
)
const (
	_ = iota
	NL80211_STA_BSS_PARAM_CTS_PROT
	NL80211_STA_BSS_PARAM_SHORT_PREAMBLE
	NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME
	NL80211_STA_BSS_PARAM_DTIM_PERIOD
	NL80211_STA_BSS_PARAM_BEACON_INTERVAL
)
const (
	_ = iota
	NL80211_STA_INFO_INACTIVE_TIME
	NL80211_STA_INFO_RX_BYTES
	NL80211_STA_INFO_TX_BYTES
	NL80211_STA_INFO_LLID
	NL80211_STA_INFO_PLID
	NL80211_STA_INFO_PLINK_STATE
	NL80211_STA_INFO_SIGNAL
	NL80211_STA_INFO_TX_BITRATE
	NL80211_STA_INFO_RX_PACKETS
	NL80211_STA_INFO_TX_PACKETS
	NL80211_STA_INFO_TX_RETRIES
	NL80211_STA_INFO_TX_FAILED
	NL80211_STA_INFO_SIGNAL_AVG
	NL80211_STA_INFO_RX_BITRATE
	NL80211_STA_INFO_BSS_PARAM
	NL80211_STA_INFO_CONNECTED_TIME
	NL80211_STA_INFO_STA_FLAGS
	NL80211_STA_INFO_BEACON_LOSS
	NL80211_STA_INFO_T_OFFSET
	NL80211_STA_INFO_LOCAL_PM
	NL80211_STA_INFO_PEER_PM
	NL80211_STA_INFO_NONPEER_PM
	NL80211_STA_INFO_RX_BYTES64
	NL80211_STA_INFO_TX_BYTES64
	NL80211_STA_INFO_CHAIN_SIGNAL
	NL80211_STA_INFO_CHAIN_SIGNAL_AVG
	NL80211_STA_INFO_EXPECTED_THROUGHPUT
	NL80211_STA_INFO_RX_DROP_MISC
	NL80211_STA_INFO_BEACON_RX
	NL80211_STA_INFO_BEACON_SIGNAL_AVG
	NL80211_STA_INFO_TID_STATS
)
const (
	_ = iota
	NL80211_TID_STATS_RX_MSDU
	NL80211_TID_STATS_TX_MSDU
	NL80211_TID_STATS_TX_MSDU_RETRIES
	NL80211_TID_STATS_TX_MSDU_FAILED
)
const (
	NL80211_MPATH_FLAG_ACTIVE = 1 << iota
	NL80211_MPATH_FLAG_RESOLVING
	NL80211_MPATH_FLAG_SN_VALID
	NL80211_MPATH_FLAG_FIXED
	NL80211_MPATH_FLAG_RESOLVED
)
const (
	_ = iota
	NL80211_MPATH_INFO_FRAME_QLEN
	NL80211_MPATH_INFO_SN
	NL80211_MPATH_INFO_METRIC
	NL80211_MPATH_INFO_EXPTIME
	NL80211_MPATH_INFO_FLAGS
	NL80211_MPATH_INFO_DISCOVERY_TIMEOUT
	NL80211_MPATH_INFO_DISCOVERY_RETRIES
)
const (
	_ = iota
	NL80211_BAND_ATTR_FREQS
	NL80211_BAND_ATTR_RATES
	NL80211_BAND_ATTR_HT_MCS_SET
	NL80211_BAND_ATTR_HT_CAPA
	NL80211_BAND_ATTR_HT_AMPDU_FACTOR
	NL80211_BAND_ATTR_HT_AMPDU_DENSITY
	NL80211_BAND_ATTR_VHT_MCS_SET
	NL80211_BAND_ATTR_VHT_CAPA
)
const (
	_ = iota
	NL80211_FREQUENCY_ATTR_FREQ
	NL80211_FREQUENCY_ATTR_DISABLED
	NL80211_FREQUENCY_ATTR_NO_IR
	NL80211_FREQUENCY_ATTR_NO_IBSS // Deprecated
	NL80211_FREQUENCY_ATTR_RADAR
	NL80211_FREQUENCY_ATTR_MAX_TX_POWER
	NL80211_FREQUENCY_ATTR_DFS_STATE
	NL80211_FREQUENCY_ATTR_DFS_TIME
	NL80211_FREQUENCY_ATTR_NO_HT40_MINUS
	NL80211_FREQUENCY_ATTR_NO_HT40_PLUS
	NL80211_FREQUENCY_ATTR_NO_80MHZ
	NL80211_FREQUENCY_ATTR_NO_160MHZ
	NL80211_FREQUENCY_ATTR_DFS_CAC_TIME
	NL80211_FREQUENCY_ATTR_INDOOR_ONLY
	NL80211_FREQUENCY_ATTR_IR_CONCURRENT
	NL80211_FREQUENCY_ATTR_NO_20MHZ
	NL80211_FREQUENCY_ATTR_NO_10MHZ
)
const (
	_ = iota
	NL80211_BITRATE_ATTR_RATE
	NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE
)
const (
	NL80211_REGDOM_SET_BY_CORE = iota
	NL80211_REGDOM_SET_BY_USER
	NL80211_REGDOM_SET_BY_DRIVER
	NL80211_REGDOM_SET_BY_COUNTRY_IE
)
const (
	NL80211_REGDOM_TYPE_COUNTRY = iota
	NL80211_REGDOM_TYPE_WORLD
	NL80211_REGDOM_TYPE_CUSTOM_WORLD
	NL80211_REGDOM_TYPE_INTERSECTION
)
const (
	_ = iota
	NL80211_ATTR_REG_RULE_FLAGS
	NL80211_ATTR_FREQ_RANGE_START
	NL80211_ATTR_FREQ_RANGE_END
	NL80211_ATTR_FREQ_RANGE_MAX_BW
	NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN
	NL80211_ATTR_POWER_RULE_MAX_EIRP
	NL80211_ATTR_DFS_CAC_TIME
)
const (
	_ = iota
	NL80211_SCHED_SCAN_MATCH_ATTR_SSID
	NL80211_SCHED_SCAN_MATCH_ATTR_RSSI
)
const (
	NL80211_RRF_NO_OFDM = 1 << iota
	NL80211_RRF_NO_CCK
	NL80211_RRF_NO_INDOOR
	NL80211_RRF_NO_OUTDOOR
	NL80211_RRF_DFS
	NL80211_RRF_PTP_ONLY
	NL80211_RRF_PTMP_ONLY
	NL80211_RRF_NO_IR
	_
	_
	_
	NL80211_RRF_AUTO_BW
	NL80211_RRF_IR_CONCURRENT
	NL80211_RRF_NO_HT40MINUS
	NL80211_RRF_NO_HT40PLUS
	NL80211_RRF_NO_80MHZ
	NL80211_RRF_NO_160MHZ
)
const (
	NL80211_DFS_UNSET = iota
	NL80211_DFS_FCC
	NL80211_DFS_ETSI
	NL80211_DFS_JP
)
const (
	NL80211_USER_REG_HINT_USER = iota
	NL80211_USER_REG_HINT_CELL_BASE
	NL80211_USER_REG_HINT_INDOOR
)
const (
	_ = iota
	NL80211_SURVEY_INFO_FREQUENCY
	NL80211_SURVEY_INFO_NOISE
	NL80211_SURVEY_INFO_IN_USE
	NL80211_SURVEY_INFO_TIME
	NL80211_SURVEY_INFO_TIME_BUSY
	NL80211_SURVEY_INFO_TIME_EXT_BUSY
	NL80211_SURVEY_INFO_TIME_RX
	NL80211_SURVEY_INFO_TIME_TX
	NL80211_SURVEY_INFO_TIME_SCAN
)
const (
	_ = iota
	NL80211_MNTR_FLAG_FCSFAIL
	NL80211_MNTR_FLAG_PLCPFAIL
	NL80211_MNTR_FLAG_CONTROL
	NL80211_MNTR_FLAG_OTHER_BSS
	NL80211_MNTR_FLAG_COOK_FRAMES
	NL80211_MNTR_FLAG_ACTIVE
)
const (
	NL80211_MESH_POWER_UNKNOWN = iota
	NL80211_MESH_POWER_ACTIVE
	NL80211_MESH_POWER_LIGHT_SLEEP
	NL80211_MESH_POWER_DEEP_SLEEP
)
const (
	_ = iota
	NL80211_MESHCONF_RETRY_TIMEOUT
	NL80211_MESHCONF_CONFIRM_TIMEOUT
	NL80211_MESHCONF_HOLDING_TIMEOUT
	NL80211_MESHCONF_MAX_PEER_LINKS
	NL80211_MESHCONF_MAX_RETRIES
	NL80211_MESHCONF_TTL
	NL80211_MESHCONF_AUTO_OPEN_PLINKS
	NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES
	NL80211_MESHCONF_PATH_REFRESH_TIME
	NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT
	NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT
	NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL
	NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME
	NL80211_MESHCONF_HWMP_ROOTMODE
	NL80211_MESHCONF_ELEMENT_TTL
	NL80211_MESHCONF_HWMP_RANN_INTERVAL
	NL80211_MESHCONF_GATE_ANNOUNCEMENTS
	NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL
	NL80211_MESHCONF_FORWARDING
	NL80211_MESHCONF_RSSI_THRESHOLD
	NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR
	NL80211_MESHCONF_HT_OPMODE
	NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT
	NL80211_MESHCONF_HWMP_ROOT_INTERVAL
	NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL
	NL80211_MESHCONF_POWER_MODE
	NL80211_MESHCONF_AWAKE_WINDOW
	NL80211_MESHCONF_PLINK_TIMEOUT
)
const (
	_ = iota
	NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL
	NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC
	NL80211_MESH_SETUP_IE
	NL80211_MESH_SETUP_USERSPACE_AUTH
	NL80211_MESH_SETUP_USERSPACE_AMPE
	NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC
	NL80211_MESH_SETUP_USERSPACE_MPM
	NL80211_MESH_SETUP_AUTH_PROTOCOL
)
const (
	_ = iota
	NL80211_TXQ_ATTR_AC
	NL80211_TXQ_ATTR_TXOP
	NL80211_TXQ_ATTR_CWMIN
	NL80211_TXQ_ATTR_CWMAX
	NL80211_TXQ_ATTR_AIFS
)
const (
	NL80211_AC_VO = iota
	NL80211_AC_VI
	NL80211_AC_BE
	NL80211_AC_BK
)
const (
	NL80211_CHAN_NO_HT = iota
	NL80211_CHAN_HT20
	NL80211_CHAN_HT40MINUS
	NL80211_CHAN_HT40PLUS
)
const (
	NL80211_CHAN_WIDTH_20_NOHT = iota
	NL80211_CHAN_WIDTH_20
	NL80211_CHAN_WIDTH_40
	NL80211_CHAN_WIDTH_80
	NL80211_CHAN_WIDTH_80P80
	NL80211_CHAN_WIDTH_160
	NL80211_CHAN_WIDTH_5
	NL80211_CHAN_WIDTH_10
)
const (
	NL80211_BSS_CHAN_WIDTH_20 = iota
	NL80211_BSS_CHAN_WIDTH_10
	NL80211_BSS_CHAN_WIDTH_5
)
const (
	_ = iota
	NL80211_BSS_BSSID
	NL80211_BSS_FREQUENCY
	NL80211_BSS_TSF
	NL80211_BSS_BEACON_INTERVAL
	NL80211_BSS_CAPABILITY
	NL80211_BSS_INFORMATION_ELEMENTS
	NL80211_BSS_SIGNAL_MBM
	NL80211_BSS_SIGNAL_UNSPEC
	NL80211_BSS_STATUS
	NL80211_BSS_SEEN_MS_AGO
	NL80211_BSS_BEACON_IES
	NL80211_BSS_CHAN_WIDTH
	NL80211_BSS_BEACON_TSF
	NL80211_BSS_PRESP_DATA
)
const (
	NL80211_BSS_STATUS_AUTHENTICATED = iota
	NL80211_BSS_STATUS_ASSOCIATED
	NL80211_BSS_STATUS_IBSS_JOINED
)
const (
	NL80211_AUTHTYPE_OPEN_SYSTEM = iota
	NL80211_AUTHTYPE_SHARED_KEY
	NL80211_AUTHTYPE_FT
	NL80211_AUTHTYPE_NETWORK_EAP
	NL80211_AUTHTYPE_SAE
)
const (
	NL80211_KEYTYPE_GROUP = iota
	NL80211_KEYTYPE_PAIRWISE
	NL80211_KEYTYPE_PEERKEY
)
const (
	NL80211_MFP_NO = iota
	NL80211_MFP_REQUIRED
)
const (
	NL80211_WPA_VERSION_1 = 1 << iota
	NL80211_WPA_VERSION_2
)
const (
	_ = iota
	NL80211_KEY_DEFAULT_TYPE_UNICAST
	NL80211_KEY_DEFAULT_TYPE_MULTICAST
)
const (
	_ = iota
	NL80211_KEY_DATA
	NL80211_KEY_IDX
	NL80211_KEY_CIPHER
	NL80211_KEY_SEQ
	NL80211_KEY_DEFAULT
	NL80211_KEY_DEFAULT_MGMT
	NL80211_KEY_TYPE
	NL80211_KEY_DEFAULT_TYPES
)
const (
	_ = iota
	NL80211_TXRATE_LEGACY
	NL80211_TXRATE_HT
	NL80211_TXRATE_VHT
	NL80211_TXRATE_GI
)
const (
	NL80211_TXRATE_DEFAULT_GI = iota
	NL80211_TXRATE_FORCE_SGI
	NL80211_TXRATE_FORCE_LGI
)
const (
	NL80211_BAND_2GHZ = iota
	NL80211_BAND_5GHZ
	NL80211_BAND_60GHZ
)
const (
	NL80211_PS_DISABLED = iota
	NL80211_PS_ENABLED
)
const (
	_ = iota
	NL80211_ATTR_CQM_RSSI_THOLD
	NL80211_ATTR_CQM_RSSI_HYST
	NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT
	NL80211_ATTR_CQM_PKT_LOSS_EVENT
	NL80211_ATTR_CQM_TXE_RATE
	NL80211_ATTR_CQM_TXE_PKTS
	NL80211_ATTR_CQM_TXE_INTVL
	NL80211_ATTR_CQM_BEACON_LOSS_EVENT
)
const (
	NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW = iota
	NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH
	NL80211_CQM_RSSI_BEACON_LOSS_EVENT
)
const (
	NL80211_TX_POWER_AUTOMATIC = iota
	NL80211_TX_POWER_LIMITED
	NL80211_TX_POWER_FIXED
)
const (
	_ = iota
	NL80211_PKTPAT_MASK
	NL80211_PKTPAT_PATTERN
	NL80211_PKTPAT_OFFSET
	NUM_NL80211_PKTPAT
)
const (
	_ = iota
	NL80211_WOWLAN_TRIG_ANY
	NL80211_WOWLAN_TRIG_DISCONNECT
	NL80211_WOWLAN_TRIG_MAGIC_PKT
	NL80211_WOWLAN_TRIG_PKT_PATTERN
	NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED
	NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE
	NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST
	NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE
	NL80211_WOWLAN_TRIG_RFKILL_RELEASE
	NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211
	NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN
	NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023
	NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN
	NL80211_WOWLAN_TRIG_TCP_CONNECTION
	NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH
	NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST
	NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS
	NL80211_WOWLAN_TRIG_NET_DETECT
	NL80211_WOWLAN_TRIG_NET_DETECT_RESULTS
	NUM_NL80211_WOWLAN_TRIG
)
const (
	_ = iota
	NL80211_WOWLAN_TCP_SRC_IPV4
	NL80211_WOWLAN_TCP_DST_IPV4
	NL80211_WOWLAN_TCP_DST_MAC
	NL80211_WOWLAN_TCP_SRC_PORT
	NL80211_WOWLAN_TCP_DST_PORT
	NL80211_WOWLAN_TCP_DATA_PAYLOAD
	NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ
	NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN
	NL80211_WOWLAN_TCP_DATA_INTERVAL
	NL80211_WOWLAN_TCP_WAKE_PAYLOAD
	NL80211_WOWLAN_TCP_WAKE_MASK
	NUM_NL80211_WOWLAN_TCP
)
const (
	_ = iota
	NL80211_ATTR_COALESCE_RULE_DELAY
	NL80211_ATTR_COALESCE_RULE_CONDITION
	NL80211_ATTR_COALESCE_RULE_PKT_PATTERN
	NUM_NL80211_ATTR_COALESCE_RULE
)
const (
	NL80211_COALESCE_CONDITION_MATCH = iota
	NL80211_COALESCE_CONDITION_NO_MATCH
)
const (
	NL80211_IFACE_LIMIT_UNSPEC = iota
	NL80211_IFACE_LIMIT_MAX
	NL80211_IFACE_LIMIT_TYPES
	NUM_NL80211_IFACE_LIMIT
)
const (
	NL80211_IFACE_COMB_UNSPEC = iota
	NL80211_IFACE_COMB_LIMITS
	NL80211_IFACE_COMB_MAXNUM
	NL80211_IFACE_COMB_STA_AP_BI_MATCH
	NL80211_IFACE_COMB_NUM_CHANNELS
	NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS
	NL80211_IFACE_COMB_RADAR_DETECT_REGIONS
	NUM_NL80211_IFACE_COMB
)
const (
	NL80211_PLINK_LISTEN = iota
	NL80211_PLINK_OPN_SNT
	NL80211_PLINK_OPN_RCVD
	NL80211_PLINK_CNF_RCVD
	NL80211_PLINK_ESTAB
	NL80211_PLINK_HOLDING
	NL80211_PLINK_BLOCKED
	NUM_NL80211_PLINK_STATES
)
const (
	NL80211_PLINK_ACTION_NO_ACTION = iota
	NL80211_PLINK_ACTION_OPEN
	NL80211_PLINK_ACTION_BLOCK
	NUM_NL80211_PLINK_ACTIONS
)
const (
	_ = iota
	NL80211_REKEY_DATA_KEK
	NL80211_REKEY_DATA_KCK
	NL80211_REKEY_DATA_REPLAY_CTR
	NUM_NL80211_REKEY_DATA
)
const (
	NL80211_HIDDEN_SSID_NOT_IN_USE = iota
	NL80211_HIDDEN_SSID_ZERO_LEN
	NL80211_HIDDEN_SSID_ZERO_CONTENTS
)
const (
	_ = iota
	NL80211_STA_WME_UAPSD_QUEUES
	NL80211_STA_WME_MAX_SP
)
const (
	_ = iota
	NL80211_PMKSA_CANDIDATE_INDEX
	NL80211_PMKSA_CANDIDATE_BSSID
	NL80211_PMKSA_CANDIDATE_PREAUTH
	NUM_NL80211_PMKSA_CANDIDATE
)
const (
	NL80211_TDLS_DISCOVERY_REQ = iota
	NL80211_TDLS_SETUP
	NL80211_TDLS_TEARDOWN
	NL80211_TDLS_ENABLE_LINK
	NL80211_TDLS_DISABLE_LINK
)
const (
	NL80211_FEATURE_SK_TX_STATUS = 1 << iota
	NL80211_FEATURE_HT_IBSS
	NL80211_FEATURE_INACTIVITY_TIMER
	NL80211_FEATURE_CELL_BASE_REG_HINTS
	NL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL
	NL80211_FEATURE_SAE
	NL80211_FEATURE_LOW_PRIORITY_SCAN
	NL80211_FEATURE_SCAN_FLUSH
	NL80211_FEATURE_AP_SCAN
	NL80211_FEATURE_VIF_TXPOWER
	NL80211_FEATURE_NEED_OBSS_SCAN
	NL80211_FEATURE_P2P_GO_CTWIN
	NL80211_FEATURE_P2P_GO_OPPPS
	_
	NL80211_FEATURE_ADVERTISE_CHAN_LIMITS
	NL80211_FEATURE_FULL_AP_CLIENT_STATE
	NL80211_FEATURE_USERSPACE_MPM
	NL80211_FEATURE_ACTIVE_MONITOR
	NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE
	NL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES
	NL80211_FEATURE_WFA_TPC_IE_IN_PROBES
	NL80211_FEATURE_QUIET
	NL80211_FEATURE_TX_POWER_INSERTION
	NL80211_FEATURE_ACKTO_ESTIMATION
	NL80211_FEATURE_STATIC_SMPS
	NL80211_FEATURE_DYNAMIC_SMPS
	NL80211_FEATURE_SUPPORTS_WMM_ADMISSION
	NL80211_FEATURE_MAC_ON_CREATE
	NL80211_FEATURE_TDLS_CHANNEL_SWITCH
	NL80211_FEATURE_SCAN_RANDOM_MAC_ADDR
	NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR
	NL80211_FEATURE_ND_RANDOM_MAC_ADDR
)
const (
	NL80211_EXT_FEATURE_VHT_IBSS = iota
)
const (
	NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS = 1 << iota
	NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2
	NL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P
	NL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U
)
const (
	NL80211_CONN_FAIL_MAX_CLIENTS = iota
	NL80211_CONN_FAIL_BLOCKED_CLIENT
)
const (
	NL80211_SCAN_FLAG_LOW_PRIORITY = 1 << iota
	NL80211_SCAN_FLAG_FLUSH
	NL80211_SCAN_FLAG_AP
	NL80211_SCAN_FLAG_RANDOM_ADDR
)
const (
	NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED = iota
	NL80211_ACL_POLICY_DENY_UNLESS_LISTED
)
const (
	NL80211_SMPS_OFF = iota
	NL80211_SMPS_STATIC
	NL80211_SMPS_DYNAMIC
)
const (
	NL80211_RADAR_DETECTED = iota
	NL80211_RADAR_CAC_FINISHED
	NL80211_RADAR_CAC_ABORTED
	NL80211_RADAR_NOP_FINISHED
)
const (
	NL80211_DFS_USABLE = iota
	NL80211_DFS_UNAVAILABLE
	NL80211_DFS_AVAILABLE
)
const (
	NL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP = 1 << iota
)
const (
	NL80211_CRIT_PROTO_UNSPEC = iota
	NL80211_CRIT_PROTO_DHCP
	NL80211_CRIT_PROTO_EAPOL
	NL80211_CRIT_PROTO_APIPA
)
const (
	NL80211_RXMGMT_FLAG_ANSWERED = 1 << iota
)
const (
	NL80211_TDLS_PEER_HT = 1 << iota
	NL80211_TDLS_PEER_VHT
	NL80211_TDLS_PEER_WMM
)

var keyPolicy Policy = MapPolicy{
	Prefix: "KEY",
	Names:  NL80211_KEY_itoa,
	Rule: map[uint16]Policy{
		NL80211_KEY_DATA:         BinaryPolicy,
		NL80211_KEY_IDX:          U8Policy,
		NL80211_KEY_CIPHER:       U32Policy,
		NL80211_KEY_SEQ:          BinaryPolicy,
		NL80211_KEY_DEFAULT:      FlagPolicy,
		NL80211_KEY_DEFAULT_MGMT: FlagPolicy,
		NL80211_KEY_TYPE:         U32Policy,
		NL80211_KEY_DEFAULT_TYPES: MapPolicy{
			Prefix: "DEFAULT_TYPE",
			Names:  NL80211_KEY_DEFAULT_TYPE_itoa,
			Rule: map[uint16]Policy{
				NL80211_KEY_DEFAULT_TYPE_UNICAST:   FlagPolicy,
				NL80211_KEY_DEFAULT_TYPE_MULTICAST: FlagPolicy,
			},
		},
	},
}

var channelPolicy Policy = MapPolicy{
	Prefix: "FREQUENCY_ATTR",
	Names:  NL80211_FREQUENCY_ATTR_itoa,
	Rule: map[uint16]Policy{
		NL80211_FREQUENCY_ATTR_FREQ:          U32Policy,
		NL80211_FREQUENCY_ATTR_DISABLED:      FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_IR:         FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_IBSS:       FlagPolicy,
		NL80211_FREQUENCY_ATTR_RADAR:         FlagPolicy,
		NL80211_FREQUENCY_ATTR_DFS_STATE:     U32Policy,
		NL80211_FREQUENCY_ATTR_DFS_TIME:      U32Policy,
		NL80211_FREQUENCY_ATTR_DFS_CAC_TIME:  U32Policy,
		NL80211_FREQUENCY_ATTR_NO_HT40_MINUS: FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_HT40_PLUS:  FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_80MHZ:      FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_160MHZ:     FlagPolicy,
		NL80211_FREQUENCY_ATTR_INDOOR_ONLY:   FlagPolicy,
		NL80211_FREQUENCY_ATTR_IR_CONCURRENT: FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_20MHZ:      FlagPolicy,
		NL80211_FREQUENCY_ATTR_NO_10MHZ:      FlagPolicy,
		NL80211_FREQUENCY_ATTR_MAX_TX_POWER:  U32Policy,
	},
}

var wowlanTrigPolicy Policy = MapPolicy{
	Prefix: "WOWLAN_TRIG",
	Names:  NL80211_WOWLAN_TRIG_itoa,
	Rule: map[uint16]Policy{
		NL80211_WOWLAN_TRIG_ANY:        FlagPolicy,
		NL80211_WOWLAN_TRIG_DISCONNECT: FlagPolicy,
		NL80211_WOWLAN_TRIG_MAGIC_PKT:  FlagPolicy,
		NL80211_WOWLAN_TRIG_PKT_PATTERN: ListPolicy{
			Nested: MapPolicy{
				Prefix: "PKTPAT",
				Names:  NL80211_PKTPAT_itoa,
				Rule: map[uint16]Policy{
					NL80211_PKTPAT_MASK:    BinaryPolicy,
					NL80211_PKTPAT_PATTERN: BinaryPolicy,
					NL80211_PKTPAT_OFFSET:  U32Policy,
				},
			},
		},
		NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH:        FlagPolicy,
		NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST:     FlagPolicy,
		NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS: FlagPolicy,
		NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE:       FlagPolicy,
		NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST:       FlagPolicy,
		NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE:          FlagPolicy,
		NL80211_WOWLAN_TRIG_RFKILL_RELEASE:          FlagPolicy,
		NL80211_WOWLAN_TRIG_TCP_CONNECTION: MapPolicy{
			Prefix: "WOWLAN_TCP",
			Names:  NL80211_WOWLAN_TCP_itoa,
			Rule: map[uint16]Policy{
				NL80211_WOWLAN_TCP_SRC_IPV4:           U32Policy,
				NL80211_WOWLAN_TCP_DST_IPV4:           U32Policy,
				NL80211_WOWLAN_TCP_DST_MAC:            BinaryPolicy,
				NL80211_WOWLAN_TCP_SRC_PORT:           U16Policy,
				NL80211_WOWLAN_TCP_DST_PORT:           U16Policy,
				NL80211_WOWLAN_TCP_DATA_PAYLOAD:       BinaryPolicy,
				NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ:   BinaryPolicy,
				NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN: BinaryPolicy,
				NL80211_WOWLAN_TCP_DATA_INTERVAL:      U32Policy,
				NL80211_WOWLAN_TCP_WAKE_PAYLOAD:       BinaryPolicy,
				NL80211_WOWLAN_TCP_WAKE_MASK:          BinaryPolicy,
			},
		},
		NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211:     BinaryPolicy,
		NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN: U32Policy,
		NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023:      BinaryPolicy,
		NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN:  U32Policy,
	},
}

var iftypesPolicy Policy = ListPolicy{Nested: FlagPolicy}

var Nl80211Policy MapPolicy = MapPolicy{
	Prefix: "NL80211_ATTR",
	Names:  NL80211_ATTR_itoa,
	Rule: map[uint16]Policy{
		NL80211_ATTR_WIPHY:      U32Policy,
		NL80211_ATTR_WIPHY_NAME: NulStringPolicy,
		NL80211_ATTR_WIPHY_TXQ_PARAMS: ListPolicy{
			Nested: MapPolicy{
				Prefix: "TXQ_ATTR",
				Names:  NL80211_TXQ_ATTR_itoa,
				Rule: map[uint16]Policy{
					NL80211_TXQ_ATTR_AC:    U8Policy,
					NL80211_TXQ_ATTR_TXOP:  U16Policy,
					NL80211_TXQ_ATTR_CWMIN: U16Policy,
					NL80211_TXQ_ATTR_CWMAX: U16Policy,
					NL80211_TXQ_ATTR_AIFS:  U8Policy,
				},
			},
		},
		NL80211_ATTR_WIPHY_FREQ:         U32Policy,
		NL80211_ATTR_WIPHY_CHANNEL_TYPE: U32Policy,
		NL80211_ATTR_CHANNEL_WIDTH:      U32Policy,
		NL80211_ATTR_CENTER_FREQ1:       U32Policy,
		NL80211_ATTR_CENTER_FREQ2:       U32Policy,

		NL80211_ATTR_RX_SIGNAL_DBM: U32Policy,
		NL80211_ATTR_RXMGMT_FLAGS:  U32Policy,

		NL80211_ATTR_WIPHY_RETRY_SHORT:        U8Policy,
		NL80211_ATTR_WIPHY_RETRY_LONG:         U8Policy,
		NL80211_ATTR_WIPHY_FRAG_THRESHOLD:     U32Policy,
		NL80211_ATTR_WIPHY_RTS_THRESHOLD:      U32Policy,
		NL80211_ATTR_WIPHY_COVERAGE_CLASS:     U8Policy,
		NL80211_ATTR_MAX_NUM_SCAN_SSIDS:       U8Policy,
		NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS: U8Policy,
		NL80211_ATTR_MAX_SCAN_IE_LEN:          U16Policy,
		NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN:    U16Policy,
		NL80211_ATTR_MAX_MATCH_SETS:           U8Policy,
		NL80211_ATTR_SUPPORT_IBSS_RSN:         FlagPolicy,
		NL80211_ATTR_SUPPORT_MESH_AUTH:        FlagPolicy,
		NL80211_ATTR_SUPPORT_AP_UAPSD:         FlagPolicy,
		NL80211_ATTR_ROAM_SUPPORT:             FlagPolicy,
		NL80211_ATTR_CIPHER_SUITES:            BinaryPolicy,
		NL80211_ATTR_MAX_NUM_PMKIDS:           U8Policy,
		NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX:   U32Policy,
		NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX:   U32Policy,
		NL80211_ATTR_PROBE_RESP_OFFLOAD:       U32Policy,
		NL80211_ATTR_WIPHY_DYN_ACK:            FlagPolicy,

		NL80211_ATTR_IFTYPE:  U32Policy,
		NL80211_ATTR_IFINDEX: U32Policy,
		NL80211_ATTR_IFNAME:  NulStringPolicy,

		NL80211_ATTR_MAC:        BinaryPolicy,
		NL80211_ATTR_PREV_BSSID: BinaryPolicy,

		NL80211_ATTR_KEY:         keyPolicy,
		NL80211_ATTR_KEYS:        ListPolicy{Nested: keyPolicy},
		NL80211_ATTR_KEY_DATA:    BinaryPolicy,
		NL80211_ATTR_KEY_IDX:     U8Policy,
		NL80211_ATTR_KEY_CIPHER:  U32Policy,
		NL80211_ATTR_KEY_DEFAULT: FlagPolicy,
		NL80211_ATTR_KEY_SEQ:     BinaryPolicy,
		NL80211_ATTR_KEY_TYPE:    U32Policy,

		NL80211_ATTR_BEACON_INTERVAL: U32Policy,
		NL80211_ATTR_DTIM_PERIOD:     U32Policy,
		NL80211_ATTR_BEACON_HEAD:     BinaryPolicy,
		NL80211_ATTR_BEACON_TAIL:     BinaryPolicy,
		NL80211_ATTR_STA_AID:         U16Policy,
		NL80211_ATTR_STA_FLAGS: MapPolicy{
			Prefix: "STA_FLAG",
			Names:  NL80211_STA_FLAG_itoa,
			Rule: map[uint16]Policy{
				NL80211_STA_FLAG_AUTHORIZED:     FlagPolicy,
				NL80211_STA_FLAG_SHORT_PREAMBLE: FlagPolicy,
				NL80211_STA_FLAG_WME:            FlagPolicy,
				NL80211_STA_FLAG_MFP:            FlagPolicy,
				NL80211_STA_FLAG_AUTHENTICATED:  FlagPolicy,
				NL80211_STA_FLAG_TDLS_PEER:      FlagPolicy,
			},
		},
		NL80211_ATTR_STA_LISTEN_INTERVAL: U16Policy,
		NL80211_ATTR_STA_SUPPORTED_RATES: BinaryPolicy,
		NL80211_ATTR_STA_PLINK_ACTION:    U8Policy,
		NL80211_ATTR_STA_VLAN:            U32Policy,
		NL80211_ATTR_MNTR_FLAGS: MapPolicy{
			Prefix: "MNTR_FLAG",
			Names:  NL80211_MNTR_FLAG_itoa,
			Rule: map[uint16]Policy{
				NL80211_MNTR_FLAG_FCSFAIL:     FlagPolicy,
				NL80211_MNTR_FLAG_PLCPFAIL:    FlagPolicy,
				NL80211_MNTR_FLAG_CONTROL:     FlagPolicy,
				NL80211_MNTR_FLAG_OTHER_BSS:   FlagPolicy,
				NL80211_MNTR_FLAG_COOK_FRAMES: FlagPolicy,
				NL80211_MNTR_FLAG_ACTIVE:      FlagPolicy,
			},
		},
		NL80211_ATTR_MESH_ID:        BinaryPolicy,
		NL80211_ATTR_MPATH_NEXT_HOP: U32Policy,

		NL80211_ATTR_REG_ALPHA2: StringPolicy,
		NL80211_ATTR_REG_RULES: ListPolicy{
			Nested: MapPolicy{
				Prefix: "REG_RULE",
				Names:  NL80211_ATTR_REG_RULE_itoa,
				Rule: map[uint16]Policy{
					NL80211_ATTR_REG_RULE_FLAGS:          U32Policy,
					NL80211_ATTR_FREQ_RANGE_START:        U32Policy,
					NL80211_ATTR_FREQ_RANGE_END:          U32Policy,
					NL80211_ATTR_FREQ_RANGE_MAX_BW:       U32Policy,
					NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN: U32Policy,
					NL80211_ATTR_POWER_RULE_MAX_EIRP:     U32Policy,
					NL80211_ATTR_DFS_CAC_TIME:            U32Policy,
				},
			},
		},

		NL80211_ATTR_BSS_CTS_PROT:        U8Policy,
		NL80211_ATTR_BSS_SHORT_PREAMBLE:  U8Policy,
		NL80211_ATTR_BSS_SHORT_SLOT_TIME: U8Policy,
		NL80211_ATTR_BSS_BASIC_RATES:     BinaryPolicy,
		NL80211_ATTR_BSS_HT_OPMODE:       U16Policy,

		NL80211_ATTR_MESH_CONFIG: MapPolicy{
			Prefix: "MESHCONF",
			Names:  NL80211_MESHCONF_itoa,
			Rule: map[uint16]Policy{
				NL80211_MESHCONF_RETRY_TIMEOUT:              U16Policy,
				NL80211_MESHCONF_CONFIRM_TIMEOUT:            U16Policy,
				NL80211_MESHCONF_HOLDING_TIMEOUT:            U16Policy,
				NL80211_MESHCONF_MAX_PEER_LINKS:             U16Policy,
				NL80211_MESHCONF_MAX_RETRIES:                U8Policy,
				NL80211_MESHCONF_TTL:                        U8Policy,
				NL80211_MESHCONF_ELEMENT_TTL:                U8Policy,
				NL80211_MESHCONF_AUTO_OPEN_PLINKS:           U8Policy,
				NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR:   U32Policy,
				NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES:      U8Policy,
				NL80211_MESHCONF_PATH_REFRESH_TIME:          U32Policy,
				NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT:      U16Policy,
				NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT:   U32Policy,
				NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL:     U16Policy,
				NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL:     U16Policy,
				NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME:    U16Policy,
				NL80211_MESHCONF_HWMP_ROOTMODE:              U8Policy,
				NL80211_MESHCONF_HWMP_RANN_INTERVAL:         U16Policy,
				NL80211_MESHCONF_GATE_ANNOUNCEMENTS:         U8Policy,
				NL80211_MESHCONF_FORWARDING:                 U8Policy,
				NL80211_MESHCONF_RSSI_THRESHOLD:             U32Policy,
				NL80211_MESHCONF_HT_OPMODE:                  U16Policy,
				NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT:  U32Policy,
				NL80211_MESHCONF_HWMP_ROOT_INTERVAL:         U16Policy,
				NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL: U16Policy,
				NL80211_MESHCONF_POWER_MODE:                 U32Policy,
				NL80211_MESHCONF_AWAKE_WINDOW:               U16Policy,
				NL80211_MESHCONF_PLINK_TIMEOUT:              U32Policy,
			},
		},
		NL80211_ATTR_MESH_SETUP: MapPolicy{
			Prefix: "MESH_SETUP",
			Names:  NL80211_MESH_SETUP_itoa,
			Rule: map[uint16]Policy{
				NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC:     U8Policy,
				NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL: U8Policy,
				NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC:   U8Policy,
				NL80211_MESH_SETUP_USERSPACE_AUTH:         FlagPolicy,
				NL80211_MESH_SETUP_AUTH_PROTOCOL:          U8Policy,
				NL80211_MESH_SETUP_USERSPACE_MPM:          FlagPolicy,
				NL80211_MESH_SETUP_IE:                     BinaryPolicy,
				NL80211_MESH_SETUP_USERSPACE_AMPE:         FlagPolicy,
			},
		},

		NL80211_ATTR_HT_CAPABILITY: BinaryPolicy,

		NL80211_ATTR_MGMT_SUBTYPE:     U8Policy,
		NL80211_ATTR_IE:               BinaryPolicy,
		NL80211_ATTR_SCAN_FREQUENCIES: ListPolicy{Nested: U32Policy},
		NL80211_ATTR_SCAN_SSIDS:       ListPolicy{Nested: BinaryPolicy},

		NL80211_ATTR_SSID:                    BinaryPolicy,
		NL80211_ATTR_AUTH_TYPE:               U32Policy,
		NL80211_ATTR_REASON_CODE:             U16Policy,
		NL80211_ATTR_FREQ_FIXED:              FlagPolicy,
		NL80211_ATTR_TIMED_OUT:               FlagPolicy,
		NL80211_ATTR_USE_MFP:                 U32Policy,
		NL80211_ATTR_STA_FLAGS2:              BinaryPolicy, // struct nl80211_sta_flag_update
		NL80211_ATTR_CONTROL_PORT:            FlagPolicy,
		NL80211_ATTR_CONTROL_PORT_ETHERTYPE:  FlagPolicy, // XXX: nl80211_send_wiphy use FLAG in kernel code, but should be U16 with 0x888E
		NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT: FlagPolicy,
		NL80211_ATTR_PRIVACY:                 FlagPolicy,
		NL80211_ATTR_CIPHER_SUITE_GROUP:      U32Policy,
		NL80211_ATTR_WPA_VERSIONS:            U32Policy,
		NL80211_ATTR_PID:                     U32Policy,
		NL80211_ATTR_4ADDR:                   U8Policy,
		NL80211_ATTR_PMKID:                   BinaryPolicy,
		NL80211_ATTR_DURATION:                U32Policy,
		NL80211_ATTR_COOKIE:                  U64Policy,
		NL80211_ATTR_TX_RATES: ListPolicy{
			Nested: MapPolicy{
				Prefix: "TXRATE",
				Names:  NL80211_TXRATE_itoa,
				Rule: map[uint16]Policy{
					NL80211_TXRATE_LEGACY: BinaryPolicy,
					NL80211_TXRATE_HT:     BinaryPolicy,
					NL80211_TXRATE_VHT:    BinaryPolicy,
					NL80211_TXRATE_GI:     BinaryPolicy,
				},
			},
		},
		NL80211_ATTR_FRAME:       BinaryPolicy,
		NL80211_ATTR_FRAME_MATCH: BinaryPolicy,
		NL80211_ATTR_PS_STATE:    U32Policy,
		NL80211_ATTR_CQM: MapPolicy{
			Prefix: "CQM",
			Names:  NL80211_ATTR_CQM_itoa,
			Rule: map[uint16]Policy{
				NL80211_ATTR_CQM_RSSI_THOLD:           U32Policy,
				NL80211_ATTR_CQM_RSSI_HYST:            U32Policy,
				NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT: U32Policy,
				NL80211_ATTR_CQM_TXE_RATE:             U32Policy,
				NL80211_ATTR_CQM_TXE_PKTS:             U32Policy,
				NL80211_ATTR_CQM_TXE_INTVL:            U32Policy,
			},
		},
		NL80211_ATTR_LOCAL_STATE_CHANGE:     FlagPolicy,
		NL80211_ATTR_AP_ISOLATE:             U8Policy,
		NL80211_ATTR_WIPHY_TX_POWER_SETTING: U32Policy,
		NL80211_ATTR_WIPHY_TX_POWER_LEVEL:   U32Policy,
		NL80211_ATTR_FRAME_TYPE:             U16Policy,
		NL80211_ATTR_WIPHY_ANTENNA_TX:       U32Policy,
		NL80211_ATTR_WIPHY_ANTENNA_RX:       U32Policy,
		NL80211_ATTR_MCAST_RATE:             U32Policy,
		NL80211_ATTR_OFFCHANNEL_TX_OK:       FlagPolicy,
		NL80211_ATTR_KEY_DEFAULT_TYPES: MapPolicy{
			Prefix: "KEY_DEFAULT_TYPE",
			Names:  NL80211_KEY_DEFAULT_TYPE_itoa,
			Rule: map[uint16]Policy{
				NL80211_KEY_DEFAULT_TYPE_UNICAST:   FlagPolicy,
				NL80211_KEY_DEFAULT_TYPE_MULTICAST: FlagPolicy,
			},
		},
		NL80211_ATTR_WOWLAN_TRIGGERS:           wowlanTrigPolicy,
		NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED: wowlanTrigPolicy,
		NL80211_ATTR_STA_PLINK_STATE:           U8Policy,
		NL80211_ATTR_SCHED_SCAN_INTERVAL:       U32Policy,
		NL80211_ATTR_REKEY_DATA: MapPolicy{
			Prefix: "REKEY_DATA",
			Names:  NL80211_REKEY_DATA_itoa,
			Rule: map[uint16]Policy{
				NL80211_REKEY_DATA_KEK:        BinaryPolicy,
				NL80211_REKEY_DATA_KCK:        BinaryPolicy,
				NL80211_REKEY_DATA_REPLAY_CTR: BinaryPolicy,
			},
		},
		NL80211_ATTR_SCAN_SUPP_RATES: ListPolicy{Nested: BinaryPolicy},
		NL80211_ATTR_HIDDEN_SSID:     U32Policy,
		NL80211_ATTR_IE_PROBE_RESP:   BinaryPolicy,
		NL80211_ATTR_IE_ASSOC_RESP:   BinaryPolicy,
		NL80211_ATTR_SCHED_SCAN_MATCH: ListPolicy{
			Nested: MapPolicy{
				Prefix: "SCHED_SCAN_MATCH",
				Names:  NL80211_SCHED_SCAN_MATCH_ATTR_itoa,
				Rule: map[uint16]Policy{
					NL80211_SCHED_SCAN_MATCH_ATTR_SSID: BinaryPolicy,
					NL80211_SCHED_SCAN_MATCH_ATTR_RSSI: U32Policy,
				},
			},
		},
		NL80211_ATTR_TX_NO_CCK_RATE:      FlagPolicy,
		NL80211_ATTR_TDLS_ACTION:         U8Policy,
		NL80211_ATTR_TDLS_DIALOG_TOKEN:   U8Policy,
		NL80211_ATTR_TDLS_OPERATION:      U8Policy,
		NL80211_ATTR_TDLS_SUPPORT:        FlagPolicy,
		NL80211_ATTR_TDLS_EXTERNAL_SETUP: FlagPolicy,
		NL80211_ATTR_TDLS_INITIATOR:      FlagPolicy,
		NL80211_ATTR_DONT_WAIT_FOR_ACK:   FlagPolicy,
		NL80211_ATTR_PROBE_RESP:          BinaryPolicy,
		NL80211_ATTR_DFS_REGION:          U8Policy,
		NL80211_ATTR_DISABLE_HT:          FlagPolicy,
		NL80211_ATTR_HT_CAPABILITY_MASK:  BinaryPolicy, // struct ieee80211_ht_cap
		NL80211_ATTR_NOACK_MAP:           U16Policy,
		NL80211_ATTR_INACTIVITY_TIMEOUT:  U16Policy,
		NL80211_ATTR_BG_SCAN_PERIOD:      U16Policy,
		NL80211_ATTR_WDEV:                U64Policy,
		NL80211_ATTR_USER_REG_HINT_TYPE:  U32Policy,
		NL80211_ATTR_SAE_DATA:            BinaryPolicy,
		NL80211_ATTR_VHT_CAPABILITY:      BinaryPolicy,
		NL80211_ATTR_SCAN_FLAGS:          U32Policy,
		NL80211_ATTR_P2P_CTWINDOW:        U8Policy,
		NL80211_ATTR_P2P_OPPPS:           U8Policy,
		NL80211_ATTR_ACL_POLICY:          U32Policy,
		NL80211_ATTR_MAC_ADDRS:           ListPolicy{Nested: BinaryPolicy},
		NL80211_ATTR_STA_CAPABILITY:      U16Policy,
		NL80211_ATTR_STA_EXT_CAPABILITY:  BinaryPolicy,
		NL80211_ATTR_SPLIT_WIPHY_DUMP:    FlagPolicy,
		NL80211_ATTR_DISABLE_VHT:         FlagPolicy,
		NL80211_ATTR_VHT_CAPABILITY_MASK: BinaryPolicy, // struct ieee80211_vht_cap
		NL80211_ATTR_MDID:                U16Policy,
		NL80211_ATTR_IE_RIC:              BinaryPolicy,
		NL80211_ATTR_PEER_AID:            U16Policy,
		NL80211_ATTR_CH_SWITCH_COUNT:     U32Policy,
		NL80211_ATTR_CH_SWITCH_BLOCK_TX:  FlagPolicy,
		// NL80211_ATTR_CSA_IES refers Nl80211Policy, which will cause "initialization loop" in golang: see init()
		NL80211_ATTR_CSA_C_OFF_BEACON:           U16Policy,
		NL80211_ATTR_CSA_C_OFF_PRESP:            U16Policy,
		NL80211_ATTR_STA_SUPPORTED_CHANNELS:     BinaryPolicy,
		NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES: BinaryPolicy,
		NL80211_ATTR_HANDLE_DFS:                 FlagPolicy,
		NL80211_ATTR_OPMODE_NOTIF:               U8Policy,
		NL80211_ATTR_VENDOR_ID:                  U32Policy,
		NL80211_ATTR_VENDOR_SUBCMD:              U32Policy,
		NL80211_ATTR_VENDOR_DATA:                BinaryPolicy,
		NL80211_ATTR_QOS_MAP:                    BinaryPolicy,
		NL80211_ATTR_MAC_HINT:                   BinaryPolicy,
		NL80211_ATTR_WIPHY_FREQ_HINT:            U32Policy,
		NL80211_ATTR_TDLS_PEER_CAPABILITY:       U32Policy,
		NL80211_ATTR_IFACE_SOCKET_OWNER:         FlagPolicy,
		NL80211_ATTR_CSA_C_OFFSETS_TX:           BinaryPolicy,
		NL80211_ATTR_USE_RRM:                    FlagPolicy,
		NL80211_ATTR_TSID:                       U8Policy,
		NL80211_ATTR_USER_PRIO:                  U8Policy,
		NL80211_ATTR_ADMITTED_TIME:              U16Policy,
		NL80211_ATTR_SMPS_MODE:                  U8Policy,
		NL80211_ATTR_OPER_CLASS:                 U8Policy,
		NL80211_ATTR_MAC_MASK:                   BinaryPolicy,
		NL80211_ATTR_WIPHY_SELF_MANAGED_REG:     FlagPolicy,
		NL80211_ATTR_EXT_FEATURES:               BinaryPolicy,
		NL80211_ATTR_SURVEY_RADIO_STATS:         FlagPolicy,
		NL80211_ATTR_NETNS_FD:                   U32Policy,
		NL80211_ATTR_SCHED_SCAN_DELAY:           U32Policy,
		NL80211_ATTR_REG_INDOOR:                 FlagPolicy,

		NL80211_ATTR_COALESCE_RULE: ListPolicy{ // XXX: nl80211_send_coalesce uses BinaryPolicy: nl80211_coalesce_rule_support
			Nested: MapPolicy{
				Prefix: "COALESCE_RULE",
				Names:  NL80211_ATTR_COALESCE_RULE_itoa,
				Rule: map[uint16]Policy{
					NL80211_ATTR_COALESCE_RULE_DELAY:     U32Policy,
					NL80211_ATTR_COALESCE_RULE_CONDITION: U32Policy,
					NL80211_ATTR_COALESCE_RULE_PKT_PATTERN: ListPolicy{
						Nested: MapPolicy{
							Prefix: "PKTPAT",
							Names:  NL80211_PKTPAT_itoa,
							Rule: map[uint16]Policy{
								NL80211_PKTPAT_MASK:    BinaryPolicy,
								NL80211_PKTPAT_PATTERN: BinaryPolicy,
								NL80211_PKTPAT_OFFSET:  U32Policy,
							},
						},
					},
				},
			},
		},

		NL80211_ATTR_STA_INFO: MapPolicy{
			Prefix: "STA_INFO",
			Names:  NL80211_STA_INFO_itoa,
			Rule: map[uint16]Policy{
				NL80211_STA_INFO_CONNECTED_TIME:   U32Policy,
				NL80211_STA_INFO_INACTIVE_TIME:    U32Policy,
				NL80211_STA_INFO_RX_BYTES:         U32Policy,
				NL80211_STA_INFO_TX_BYTES:         U32Policy,
				NL80211_STA_INFO_RX_BYTES64:       U64Policy,
				NL80211_STA_INFO_TX_BYTES64:       U64Policy,
				NL80211_STA_INFO_LLID:             U16Policy,
				NL80211_STA_INFO_PLID:             U16Policy,
				NL80211_STA_INFO_PLINK_STATE:      U8Policy,
				NL80211_STA_INFO_SIGNAL:           U8Policy,
				NL80211_STA_INFO_SIGNAL_AVG:       U8Policy,
				NL80211_STA_INFO_CHAIN_SIGNAL:     ListPolicy{Nested: U8Policy},
				NL80211_STA_INFO_CHAIN_SIGNAL_AVG: ListPolicy{Nested: U8Policy},
				NL80211_STA_INFO_TX_BITRATE: MapPolicy{
					Prefix: "RATE_INFO",
					Names:  NL80211_RATE_INFO_itoa,
					Rule: map[uint16]Policy{
						NL80211_RATE_INFO_BITRATE32:       U32Policy,
						NL80211_RATE_INFO_BITRATE:         U16Policy,
						NL80211_RATE_INFO_MCS:             U8Policy,
						NL80211_RATE_INFO_SHORT_GI:        FlagPolicy,
						NL80211_RATE_INFO_VHT_MCS:         U8Policy,
						NL80211_RATE_INFO_VHT_NSS:         U8Policy,
						NL80211_RATE_INFO_40_MHZ_WIDTH:    FlagPolicy,
						NL80211_RATE_INFO_80_MHZ_WIDTH:    FlagPolicy,
						NL80211_RATE_INFO_80P80_MHZ_WIDTH: FlagPolicy,
						NL80211_RATE_INFO_160_MHZ_WIDTH:   FlagPolicy,
					},
				},
				NL80211_STA_INFO_RX_BITRATE: MapPolicy{
					Prefix: "RATE_INFO",
					Names:  NL80211_RATE_INFO_itoa,
					Rule: map[uint16]Policy{
						NL80211_RATE_INFO_BITRATE32:       U32Policy,
						NL80211_RATE_INFO_BITRATE:         U16Policy,
						NL80211_RATE_INFO_MCS:             U8Policy,
						NL80211_RATE_INFO_SHORT_GI:        FlagPolicy,
						NL80211_RATE_INFO_VHT_MCS:         U8Policy,
						NL80211_RATE_INFO_VHT_NSS:         U8Policy,
						NL80211_RATE_INFO_40_MHZ_WIDTH:    FlagPolicy,
						NL80211_RATE_INFO_80_MHZ_WIDTH:    FlagPolicy,
						NL80211_RATE_INFO_80P80_MHZ_WIDTH: FlagPolicy,
						NL80211_RATE_INFO_160_MHZ_WIDTH:   FlagPolicy,
					},
				},
				NL80211_STA_INFO_RX_PACKETS:          U32Policy,
				NL80211_STA_INFO_TX_PACKETS:          U32Policy,
				NL80211_STA_INFO_TX_RETRIES:          U32Policy,
				NL80211_STA_INFO_TX_FAILED:           U32Policy,
				NL80211_STA_INFO_EXPECTED_THROUGHPUT: U32Policy,
				NL80211_STA_INFO_BEACON_LOSS:         U32Policy,
				NL80211_STA_INFO_LOCAL_PM:            U32Policy,
				NL80211_STA_INFO_PEER_PM:             U32Policy,
				NL80211_STA_INFO_NONPEER_PM:          U32Policy,
				NL80211_STA_INFO_BSS_PARAM: MapPolicy{
					Prefix: "BSS_PARAM",
					Names:  NL80211_STA_BSS_PARAM_itoa,
					Rule: map[uint16]Policy{
						NL80211_STA_BSS_PARAM_CTS_PROT:        FlagPolicy,
						NL80211_STA_BSS_PARAM_SHORT_PREAMBLE:  FlagPolicy,
						NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME: FlagPolicy,
						NL80211_STA_BSS_PARAM_DTIM_PERIOD:     U8Policy,
						NL80211_STA_BSS_PARAM_BEACON_INTERVAL: U16Policy,
					},
				},
				NL80211_STA_INFO_STA_FLAGS:         BinaryPolicy, // struct nl80211_sta_flag_update
				NL80211_STA_INFO_T_OFFSET:          U64Policy,
				NL80211_STA_INFO_RX_DROP_MISC:      U64Policy,
				NL80211_STA_INFO_BEACON_RX:         U64Policy,
				NL80211_STA_INFO_BEACON_SIGNAL_AVG: U8Policy,
				NL80211_STA_INFO_TID_STATS: ListPolicy{
					Nested: MapPolicy{
						Prefix: "TID_STATS",
						Names:  NL80211_TID_STATS_itoa,
						Rule: map[uint16]Policy{
							NL80211_TID_STATS_RX_MSDU:         U64Policy,
							NL80211_TID_STATS_TX_MSDU:         U64Policy,
							NL80211_TID_STATS_TX_MSDU_RETRIES: U64Policy,
							NL80211_TID_STATS_TX_MSDU_FAILED:  U64Policy,
						},
					},
				},
			},
		},
		NL80211_ATTR_SUPPORTED_IFTYPES: ListPolicy{Nested: FlagPolicy},
		NL80211_ATTR_WIPHY_BANDS: ListPolicy{
			Nested: MapPolicy{
				Prefix: "BAND",
				Names:  NL80211_BAND_ATTR_itoa,
				Rule: map[uint16]Policy{
					NL80211_BAND_ATTR_HT_MCS_SET:       BinaryPolicy, // struct ieee80211_mcs_info
					NL80211_BAND_ATTR_HT_CAPA:          U16Policy,
					NL80211_BAND_ATTR_HT_AMPDU_FACTOR:  U8Policy,
					NL80211_BAND_ATTR_HT_AMPDU_DENSITY: U8Policy,
					NL80211_BAND_ATTR_VHT_MCS_SET:      BinaryPolicy, // struct ieee80211_vht_mcs_info
					NL80211_BAND_ATTR_VHT_CAPA:         U32Policy,
					NL80211_BAND_ATTR_RATES: ListPolicy{
						Nested: MapPolicy{
							Prefix: "BITRATE",
							Names:  NL80211_BITRATE_ATTR_itoa,
							Rule: map[uint16]Policy{
								NL80211_BITRATE_ATTR_RATE:               U32Policy,
								NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE: FlagPolicy,
							},
						},
					},
					NL80211_BAND_ATTR_FREQS: ListPolicy{
						Nested: channelPolicy,
					},
				},
			},
		},
		NL80211_ATTR_SUPPORTED_COMMANDS:             ListPolicy{Nested: U32Policy},
		NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION: U32Policy,
		NL80211_ATTR_TX_FRAME_TYPES: ListPolicy{
			Nested: MapPolicy{
				Prefix: "_",
				Names:  NL80211_ATTR_itoa,
				Rule: map[uint16]Policy{
					NL80211_ATTR_FRAME_TYPE: U16Policy,
				},
			},
		},
		NL80211_ATTR_RX_FRAME_TYPES: ListPolicy{
			Nested: MapPolicy{
				Prefix: "_",
				Names:  NL80211_ATTR_itoa,
				Rule: map[uint16]Policy{
					NL80211_ATTR_FRAME_TYPE: U16Policy,
				},
			},
		},
		NL80211_ATTR_SOFTWARE_IFTYPES: ListPolicy{Nested: FlagPolicy},
		NL80211_ATTR_INTERFACE_COMBINATIONS: ListPolicy{
			Nested: MapPolicy{
				Prefix: "IFACE_COMB",
				Names:  NL80211_IFACE_COMB_itoa,
				Rule: map[uint16]Policy{
					NL80211_IFACE_COMB_LIMITS: ListPolicy{
						Nested: MapPolicy{
							Prefix: "IFACE",
							Names:  NL80211_IFACE_itoa,
							Rule: map[uint16]Policy{
								NL80211_IFACE_LIMIT_MAX:   U32Policy,
								NL80211_IFACE_LIMIT_TYPES: iftypesPolicy,
							},
						},
					},
					NL80211_IFACE_COMB_STA_AP_BI_MATCH:      FlagPolicy,
					NL80211_IFACE_COMB_NUM_CHANNELS:         U32Policy,
					NL80211_IFACE_COMB_MAXNUM:               U32Policy,
					NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS:  U32Policy,
					NL80211_IFACE_COMB_RADAR_DETECT_REGIONS: U32Policy,
				},
			},
		},
		NL80211_ATTR_DEVICE_AP_SME: U32Policy,
		NL80211_ATTR_FEATURE_FLAGS: U32Policy,
		NL80211_ATTR_MAC_ACL_MAX:   U32Policy,
		NL80211_ATTR_EXT_CAPA:      BinaryPolicy, // []uint8 extended_capabilities
		NL80211_ATTR_EXT_CAPA_MASK: BinaryPolicy, // []uint8 extended_capabilities_mask
		NL80211_ATTR_MPATH_INFO: MapPolicy{
			Prefix: "MPATH_INFO",
			Names:  NL80211_MPATH_INFO_itoa,
			Rule: map[uint16]Policy{
				NL80211_MPATH_INFO_FRAME_QLEN:        U32Policy,
				NL80211_MPATH_INFO_SN:                U32Policy,
				NL80211_MPATH_INFO_METRIC:            U32Policy,
				NL80211_MPATH_INFO_EXPTIME:           U32Policy,
				NL80211_MPATH_INFO_FLAGS:             U8Policy,
				NL80211_MPATH_INFO_DISCOVERY_TIMEOUT: U32Policy,
				NL80211_MPATH_INFO_DISCOVERY_RETRIES: U8Policy,
			},
		},
		NL80211_ATTR_KEY_DEFAULT_MGMT: FlagPolicy,
		NL80211_ATTR_GENERATION:       U32Policy,
		NL80211_ATTR_BSS: MapPolicy{
			Prefix: "BSS",
			Names:  NL80211_BSS_itoa,
			Rule: map[uint16]Policy{
				NL80211_BSS_BSSID:                BinaryPolicy,
				NL80211_BSS_PRESP_DATA:           FlagPolicy,
				NL80211_BSS_TSF:                  U64Policy,
				NL80211_BSS_INFORMATION_ELEMENTS: BinaryPolicy,
				NL80211_BSS_BEACON_TSF:           U64Policy,
				NL80211_BSS_BEACON_IES:           BinaryPolicy,
				NL80211_BSS_BEACON_INTERVAL:      U16Policy,
				NL80211_BSS_CAPABILITY:           U16Policy,
				NL80211_BSS_FREQUENCY:            U32Policy,
				NL80211_BSS_CHAN_WIDTH:           U32Policy,
				NL80211_BSS_SEEN_MS_AGO:          U32Policy,
				NL80211_BSS_SIGNAL_MBM:           U32Policy,
				NL80211_BSS_SIGNAL_UNSPEC:        U8Policy,
				NL80211_BSS_STATUS:               U32Policy,
			},
		},
		NL80211_ATTR_REG_INITIATOR:          U8Policy,
		NL80211_ATTR_REG_TYPE:               U8Policy,
		NL80211_ATTR_FREQ_BEFORE:            channelPolicy,
		NL80211_ATTR_FREQ_AFTER:             channelPolicy,
		NL80211_ATTR_TESTDATA:               BinaryPolicy,
		NL80211_ATTR_DISCONNECTED_BY_AP:     FlagPolicy,
		NL80211_ATTR_STATUS_CODE:            U16Policy,
		NL80211_ATTR_CIPHER_SUITES_PAIRWISE: BinaryPolicy,
		NL80211_ATTR_AKM_SUITES:             BinaryPolicy, // [NL80211_MAX_NR_AKM_SUITES]uint32
		NL80211_ATTR_REQ_IE:                 BinaryPolicy,
		NL80211_ATTR_RESP_IE:                BinaryPolicy,
		NL80211_ATTR_SURVEY_INFO: MapPolicy{
			Prefix: "SURVEY_INFO",
			Names:  NL80211_SURVEY_INFO_itoa,
			Rule: map[uint16]Policy{
				NL80211_SURVEY_INFO_FREQUENCY:     U32Policy,
				NL80211_SURVEY_INFO_NOISE:         U8Policy,
				NL80211_SURVEY_INFO_IN_USE:        FlagPolicy,
				NL80211_SURVEY_INFO_TIME:          U64Policy,
				NL80211_SURVEY_INFO_TIME_BUSY:     U64Policy,
				NL80211_SURVEY_INFO_TIME_EXT_BUSY: U64Policy,
				NL80211_SURVEY_INFO_TIME_RX:       U64Policy,
				NL80211_SURVEY_INFO_TIME_TX:       U64Policy,
				NL80211_SURVEY_INFO_TIME_SCAN:     U64Policy,
			},
		},
		NL80211_ATTR_ACK: FlagPolicy,
		NL80211_ATTR_STA_WME: MapPolicy{
			Prefix: "STA_WME",
			Names:  NL80211_STA_WME_itoa,
			Rule: map[uint16]Policy{
				NL80211_STA_WME_UAPSD_QUEUES: U8Policy,
				NL80211_STA_WME_MAX_SP:       U8Policy,
			},
		},
		NL80211_ATTR_PMKSA_CANDIDATE: MapPolicy{
			Prefix: "PMKSA_CANDIDATE",
			Names:  NL80211_PMKSA_CANDIDATE_itoa,
			Rule: map[uint16]Policy{
				NL80211_PMKSA_CANDIDATE_INDEX:   U32Policy,
				NL80211_PMKSA_CANDIDATE_BSSID:   BinaryPolicy,
				NL80211_PMKSA_CANDIDATE_PREAUTH: FlagPolicy,
			},
		},
		NL80211_ATTR_CONN_FAILED_REASON:     U32Policy,
		NL80211_ATTR_LOCAL_MESH_POWER_MODE:  U32Policy,
		NL80211_ATTR_RADAR_EVENT:            U32Policy,
		NL80211_ATTR_PROTOCOL_FEATURES:      U32Policy,
		NL80211_ATTR_CRIT_PROT_ID:           U16Policy,
		NL80211_ATTR_MAX_CRIT_PROT_DURATION: U16Policy,
		NL80211_ATTR_SUPPORT_5_MHZ:          FlagPolicy,
		NL80211_ATTR_SUPPORT_10_MHZ:         FlagPolicy,
		NL80211_ATTR_VENDOR_EVENTS:          ListPolicy{Nested: BinaryPolicy},
		NL80211_ATTR_MAX_AP_ASSOC_STA:       U32Policy,
		NL80211_ATTR_MAX_CSA_COUNTERS:       U8Policy,
	},
}

func init() {
	Nl80211Policy.Rule[NL80211_ATTR_CSA_IES] = Nl80211Policy
}
